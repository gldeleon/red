<?php
/**
 * Class execQuery v.1.2.
 * @author Ing. Victor Alfonso Rivera Anzures
 *
 * This class returns the results of the given sql statement formatted as an associative array
 * or a json string depending on the return parameter of the execute method.
 *
 */

define("ARRAY_ASSOC", 1);
define("JSON_ARR",2);
define("SEP_VALS", 3);
define("__SEPARATOR", "#@#");


class execQuery {

    private $query;
    private $params = array();
    private $types = array();
    private $result = array();
    /**
     *
     * @var integer Number of affected rows of the last executed statement
     */
    public $aRows;
    /**
     *
     * @var integer Id generated by the last insert statement
     */
    public $last_id;
    /**
     * @var integer Number of rows from the executed Select statement
     */
    public $numrows;

    /**
     *
     * @var array Number of columns of the executed Select statement
     */
    private $columns = array();
    /**
     *
     * @param string $query DB Statement
     * @param array [Optional] $params Query parameters
     * @param string [Optional] $types Data types of the query parameters: i - integer, s - string
     *
     */
    public function __construct($query, $params = array(), $types = ""){

        $this->query = $query;
        $this->params = $params;
        $this->types = array($types);

        if(count($params) > 0){
	        if($types == ""){
	        	die("<p>Error: Invalid type or no types specified on statement : <br/>".$this->query.".</p>");
	        }
        }
        if(count($this->params) != strlen($types)){
        	die("<p>Error: Number of elements in type definition string doesn't match number of bind variables on statment: <br/>".$this->query." <br/>".strlen($types)."</p>");
        }

    }
    /**
     * Executes the statement to be processed later
     * @return Array
     * @param string [Optional] $returnType
     */
    private function statement($returnType){

        $config = new config();
        $conn = new mysqli($config->db_server, $config->db_user, $config->db_passwd, $config->db_name);

        if ($conn->connect_error) {
        	die('Error de conexiÃ³n: ' . $conn->connect_error);
        }

        $ps = $conn->prepare($this->query);

        if(!$ps){
        	die($conn->error);
        }

        $parameters = array();
        $references = array();

        if(count($this->params) > 0){
        	
        	$parameters = array_merge($this->types, $this->params);

        	foreach($parameters as $key => $value){
        		$references[$key] = &$parameters[$key];
        	}

//             call_user_func_array(array($ps, "bind_param"), $references);

        	$method = new ReflectionMethod("mysqli_stmt", "bind_param");
        	$method->invokeArgs($ps, $references);
        }

        $execute = $ps->execute();

		/****************************************************************************
		 * If the number of fields is higher than 0 (zero) then the query statement
         * is a select statement otherwise its an insert, update or delete.
		 * @author Ing. Victor Alfonso Rivera Anzures 2011-11-21
		 ****************************************************************************/

         if($ps->field_count > 0){
		        $meta = $ps->result_metadata();
		        $this->columns = $meta->fetch_fields();
		        $params = array();

		        foreach($this->columns as $col_name => $col){

					$params[$col->name]  = &$col->name;

		        }

		        $ps->store_result();
		        $this->numrows = $ps->num_rows;


		        $numPar = count($params);

// 		        $res = call_user_func_array(array($ps, "bind_result"), $params);

		        $method = new ReflectionMethod("mysqli_stmt", "bind_result");
		        $res = $method->invokeArgs($ps, $params);
		        if(!$res){
		        	$this->result = "bind_result() failed: " . $ps->error . "\n" ;
		            die($this->result);
		        }
		        else{
		              while($ps->fetch()){

		                      $string = "";
		                      $counter = 0;
		                      $resultArr = array();
		                      foreach($params as $field => $val){

			                      	if($returnType == 3){
				                          $counter += 1;
				                          $string .= $val;

				                          if($counter < $numPar){
				                              $string .= __SEPARATOR;
				                          }
			                      	}
		                         	else{
		                            	$resultArr[$field] = $val;
		                         	}

		                      }
		                      	$this->result[] = ($returnType == 3)? $string : $resultArr;
		              }

		              if($returnType == 2){

		              		$this->result = json_encode($this->result);

		              }

		        }
         }
         else{
         	$response = true;
         	
         	if(!$execute){
         		$response = $conn->error;
         	}

         	$this->last_id = $ps->insert_id;
         	$this->aRows = $ps->affected_rows;

			$this->result = array("response" => $response,
								  "last_id" => $this->last_id,
								  "affected_rows" => $this->aRows);

			if($returnType == 2){
				$this->result = json_encode($this->result);
			}


         }

        return $this->result;

        $ps->free_result();


        $ps->close();
        $conn->close();

    }

    /**
    * Returns an array with the results of the executed statement.
    * The results can be returned in three different formats defined by the passed parameter:
    * Associative Array, Json Array, Values separated by a user defined separator
    *
    * If the statement is an insert, update or delete the returned array is
    * array("response" => [true|mysql_error], "last_id" => [int], "affected_rows" => [int])
    * json formatted [{"response" : [true|mysql_error], "last_id" : [int], "affected_rows" : [int]}]
    * 
    * @param string $returnType ARRAY_ASSOC, JSON_ARRAY, SEP_VALS
    * @return array or json
    * 
    */

    public function execute($returnType = SEP_VALS){

    	return $this->statement($returnType);

    }

    /****************************
     * DEPRECATED FUNCTIONS
     ****************************/

    /**
     * Returns OK on success or an SQL Error on failure. Retrives the last inserted Id for insert statements
     * Also returns the number of affected rows by insert, update and delete statements
     * @return string
     * @deprecated
     */

    private function insertUpdate(){

        $config = new config();
        $conn = new mysqli($config->db_server, $config->db_user, $config->db_passwd, $config->db_name);

        $ps = $conn->prepare($this->query);

        if(!$ps){
        	die($conn->error);
        }

        if(count($this->params) > 0){

        	$parameters = array_merge($this->types, $this->params);

        	foreach($parameters as $key => $value){
        		$references[$key] = &$parameters[$key];
        	}
			
        	$method = new ReflectionMethod("mysqli_stmt", "bind_param");
        	$method->invokeArgs($ps, $references);

//         	call_user_func_array(array($ps, "bind_param"), $references);

//             call_user_func_array(array($ps, "bind_param"), array_merge($this->types, $this->params));
        }

        $execute = $ps->execute();

        $response = ($execute) ? "OK" : $ps->error;

        $this->last_id = $ps->insert_id;
        $this->aRows = $ps->affected_rows;

        return $response;

        $ps->close();
        $conn->close();

    }

    /**
     *
     * Enter description here ...
     * @return array
     * @deprecated
     */

    public function getQueryResults(){

        return $this->statement(SEP_VALS);

    }

    /**
     * Returns OK if the Insert statement was successfully executed.
     * If statement fail, returns an SQL error.
     * @return string
     * @deprecated
     */

    public function insertData(){

        return $this->insertUpdate();

    }

    /**
     * Returns OK if the Update statement was successfully executed.
     * If statement fail, returns an SQL error.
     * @return string
     * @deprecated
     */

    public function updatetData(){

        return $this->insertUpdate();

    }

    /**
     * Returns OK if the Delete statement was successfully executed.
     * If statement fail, returns an SQL error.
     * @return string
     * @deprecated
     */

    public function deletetData(){

        return $this->insertUpdate();

    }

    public function __destruct() {

        unset($this->query);
        unset($this->params);
        unset($this->types);
        unset($this->result);
        unset($this->numrows);
        unset($this->columns);
        unset($this->last_id);

    }


}
?>